// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RecoData;
//
//    var recommendations = Recommendations.FromJson(jsonString);

namespace RecoData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Recommendations
    {
        [JsonProperty("recommendations")]
        public List<Recommendation> RecommendationsRecommendations { get; set; }

        [JsonProperty("list_data")]
        public ListData ListData { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }
    }

    public partial class ListData
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("list_key")]
        public string ListKey { get; set; }

        [JsonProperty("style_type")]
        public string StyleType { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("per_page")]
        public long PerPage { get; set; }

        [JsonProperty("page")]
        public long Page { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("geolocation")]
        public Geolocation Geolocation { get; set; }
    }

    public partial class Geolocation
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("state")]
        public String State { get; set; }

        [JsonProperty("country")]
        public String Country { get; set; }

        [JsonProperty("postal_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("metro_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MetroCode { get; set; }

        [JsonProperty("range")]
        public string Range { get; set; }
    }

    public partial class Recommendation
    {
        [JsonProperty("event")]
        public Event Event { get; set; }

        [JsonProperty("score")]
        public long Score { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("type")]
        public String Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("datetime_utc")]
        public DateTimeOffset DatetimeUtc { get; set; }

        [JsonProperty("venue")]
        public Venue Venue { get; set; }

        [JsonProperty("datetime_tbd")]
        public bool DatetimeTbd { get; set; }

        [JsonProperty("performers")]
        public List<Performer> Performers { get; set; }

        [JsonProperty("is_open")]
        public bool IsOpen { get; set; }

        [JsonProperty("links")]
        public List<object> Links { get; set; }

        [JsonProperty("datetime_local")]
        public DateTimeOffset DatetimeLocal { get; set; }

        [JsonProperty("time_tbd")]
        public bool TimeTbd { get; set; }

        [JsonProperty("short_title")]
        public string ShortTitle { get; set; }

        [JsonProperty("visible_until_utc")]
        public DateTimeOffset VisibleUntilUtc { get; set; }

        [JsonProperty("stats")]
        public EventStats Stats { get; set; }

        [JsonProperty("taxonomies")]
        public List<Taxonomy> Taxonomies { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("announce_date")]
        public DateTimeOffset AnnounceDate { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("date_tbd")]
        public bool DateTbd { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("popularity")]
        public double Popularity { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("access_method")]
        public AccessMethod AccessMethod { get; set; }

        [JsonProperty("event_promotion")]
        public object EventPromotion { get; set; }

        [JsonProperty("announcements")]
        public Announcements Announcements { get; set; }

        [JsonProperty("conditional")]
        public bool Conditional { get; set; }

        [JsonProperty("enddatetime_utc")]
        public object EnddatetimeUtc { get; set; }

        [JsonProperty("visible_at")]
        public DateTimeOffset? VisibleAt { get; set; }

        [JsonProperty("is_visible_override")]
        public IsVisibleOverride IsVisibleOverride { get; set; }

        [JsonProperty("tdc_pvo_id")]
        public long TdcPvoId { get; set; }

        [JsonProperty("tdc_pv_id")]
        public long TdcPvId { get; set; }

        [JsonProperty("is_visible")]
        public bool IsVisible { get; set; }

        [JsonProperty("taxonomy_id")]
        public long TaxonomyId { get; set; }

        [JsonProperty("home_team")]
        public object HomeTeam { get; set; }

        [JsonProperty("away_team")]
        public object AwayTeam { get; set; }

        [JsonProperty("approved")]
        public bool Approved { get; set; }

        [JsonProperty("general_admission")]
        public bool GeneralAdmission { get; set; }
    }

    public partial class AccessMethod
    {
        [JsonProperty("method")]
        public string Method { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("employee_only")]
        public bool EmployeeOnly { get; set; }
    }

    public partial class Announcements
    {
    }

    public partial class Performer
    {
        [JsonProperty("type")]
        public String Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("images")]
        public Images Images { get; set; }

        [JsonProperty("divisions")]
        public object Divisions { get; set; }

        [JsonProperty("has_upcoming_events")]
        public bool HasUpcomingEvents { get; set; }

        [JsonProperty("primary")]
        public bool Primary { get; set; }

        [JsonProperty("stats")]
        public PerformerStats Stats { get; set; }

        [JsonProperty("taxonomies")]
        public List<Taxonomy> Taxonomies { get; set; }

        [JsonProperty("image_attribution")]
        public string ImageAttribution { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("home_venue_id")]
        public object HomeVenueId { get; set; }

        [JsonProperty("short_name")]
        public string ShortName { get; set; }

        [JsonProperty("num_upcoming_events")]
        public long NumUpcomingEvents { get; set; }

        [JsonProperty("colors")]
        public object Colors { get; set; }

        [JsonProperty("image_license")]
        public string ImageLicense { get; set; }

        [JsonProperty("genres", NullValueHandling = NullValueHandling.Ignore)]
        public List<Genre> Genres { get; set; }

        [JsonProperty("popularity")]
        public long Popularity { get; set; }

        [JsonProperty("home_team")]
        public bool HomeTeam { get; set; }

        [JsonProperty("away_team")]
        public bool AwayTeam { get; set; }

        [JsonProperty("location")]
        public object Location { get; set; }

        [JsonProperty("image_rights_message")]
        public string ImageRightsMessage { get; set; }
    }

    public partial class Genre
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public String Name { get; set; }

        [JsonProperty("slug")]
        public String Slug { get; set; }

        [JsonProperty("primary")]
        public bool Primary { get; set; }
    }

    public partial class Images
    {
        [JsonProperty("huge", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Huge { get; set; }
    }

    public partial class PerformerStats
    {
        [JsonProperty("event_count")]
        public long EventCount { get; set; }
    }

    public partial class Taxonomy
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public String Name { get; set; }

        [JsonProperty("parent_id")]
        public object ParentId { get; set; }

        [JsonProperty("rank")]
        public long Rank { get; set; }

        [JsonProperty("seo_event_type")]
        public string SeoEventType { get; set; }
    }

    public partial class EventStats
    {
        [JsonProperty("listing_count")]
        public long ListingCount { get; set; }

        [JsonProperty("average_price")]
        public long AveragePrice { get; set; }

        [JsonProperty("lowest_price_good_deals")]
        public long LowestPriceGoodDeals { get; set; }

        [JsonProperty("lowest_price")]
        public long LowestPrice { get; set; }

        [JsonProperty("highest_price")]
        public long HighestPrice { get; set; }

        [JsonProperty("visible_listing_count")]
        public long VisibleListingCount { get; set; }

        [JsonProperty("dq_bucket_counts")]
        public List<long> DqBucketCounts { get; set; }

        [JsonProperty("median_price")]
        public long MedianPrice { get; set; }

        [JsonProperty("lowest_sg_base_price")]
        public long LowestSgBasePrice { get; set; }

        [JsonProperty("lowest_sg_base_price_good_deals")]
        public long LowestSgBasePriceGoodDeals { get; set; }
    }

    public partial class Venue
    {
        [JsonProperty("state")]
        public String State { get; set; }

        [JsonProperty("name_v2")]
        public string NameV2 { get; set; }

        [JsonProperty("postal_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("links")]
        public List<object> Links { get; set; }

        [JsonProperty("timezone")]
        public String Timezone { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("has_upcoming_events")]
        public bool HasUpcomingEvents { get; set; }

        [JsonProperty("num_upcoming_events")]
        public long NumUpcomingEvents { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("extended_address")]
        public string ExtendedAddress { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("popularity")]
        public long Popularity { get; set; }

        [JsonProperty("access_method")]
        public AccessMethod AccessMethod { get; set; }

        [JsonProperty("metro_code")]
        public long MetroCode { get; set; }

        [JsonProperty("capacity")]
        public long Capacity { get; set; }

        [JsonProperty("display_location")]
        public string DisplayLocation { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }
    }

    public enum Country { Us };

    public enum State { In, Ky, Oh };

    public enum IsVisibleOverride { Unset, Visible };

    public enum Name { Blues, ClassicRock, Jazz, Pop, Rap, Rnb, Rock, Soul };

    public enum Slug { Blues, ClassicRock, Jazz, Pop, Rap, Rnb, Rock, Soul };

    public enum ImageLicense { Rightsmanaged, SeatGeek20222000X2000, SeatGeek2022CreativeProject };

    public enum NameEnum { Concert, Concerts };

    public enum PerformerType { Band };

    public enum Status { Normal };

    public enum Timezone { AmericaIndianaIndianapolis, AmericaNewYork };

    public partial class Recommendations
    {
        public static Recommendations FromJson(string json) => JsonConvert.DeserializeObject<Recommendations>(json, RecoData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Recommendations self) => JsonConvert.SerializeObject(self, RecoData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountryConverter.Singleton,
                StateConverter.Singleton,
                IsVisibleOverrideConverter.Singleton,
                NameConverter.Singleton,
                SlugConverter.Singleton,
                ImageLicenseConverter.Singleton,
                NameEnumConverter.Singleton,
                PerformerTypeConverter.Singleton,
                StatusConverter.Singleton,
                TimezoneConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "US")
            {
                return Country.Us;
            }
            throw new Exception("Cannot unmarshal type Country");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            if (value == Country.Us)
            {
                serializer.Serialize(writer, "US");
                return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class StateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(State) || t == typeof(State?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "IN":
                    return State.In;
                case "KY":
                    return State.Ky;
                case "OH":
                    return State.Oh;
            }
            throw new Exception("Cannot unmarshal type State");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (State)untypedValue;
            switch (value)
            {
                case State.In:
                    serializer.Serialize(writer, "IN");
                    return;
                case State.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case State.Oh:
                    serializer.Serialize(writer, "OH");
                    return;
            }
            throw new Exception("Cannot marshal type State");
        }

        public static readonly StateConverter Singleton = new StateConverter();
    }

    internal class IsVisibleOverrideConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IsVisibleOverride) || t == typeof(IsVisibleOverride?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "UNSET":
                    return IsVisibleOverride.Unset;
                case "VISIBLE":
                    return IsVisibleOverride.Visible;
            }
            throw new Exception("Cannot unmarshal type IsVisibleOverride");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IsVisibleOverride)untypedValue;
            switch (value)
            {
                case IsVisibleOverride.Unset:
                    serializer.Serialize(writer, "UNSET");
                    return;
                case IsVisibleOverride.Visible:
                    serializer.Serialize(writer, "VISIBLE");
                    return;
            }
            throw new Exception("Cannot marshal type IsVisibleOverride");
        }

        public static readonly IsVisibleOverrideConverter Singleton = new IsVisibleOverrideConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Blues":
                    return Name.Blues;
                case "Classic Rock":
                    return Name.ClassicRock;
                case "Jazz":
                    return Name.Jazz;
                case "Pop":
                    return Name.Pop;
                case "Rap":
                    return Name.Rap;
                case "Rnb":
                    return Name.Rnb;
                case "Rock":
                    return Name.Rock;
                case "Soul":
                    return Name.Soul;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.Blues:
                    serializer.Serialize(writer, "Blues");
                    return;
                case Name.ClassicRock:
                    serializer.Serialize(writer, "Classic Rock");
                    return;
                case Name.Jazz:
                    serializer.Serialize(writer, "Jazz");
                    return;
                case Name.Pop:
                    serializer.Serialize(writer, "Pop");
                    return;
                case Name.Rap:
                    serializer.Serialize(writer, "Rap");
                    return;
                case Name.Rnb:
                    serializer.Serialize(writer, "Rnb");
                    return;
                case Name.Rock:
                    serializer.Serialize(writer, "Rock");
                    return;
                case Name.Soul:
                    serializer.Serialize(writer, "Soul");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class SlugConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Slug) || t == typeof(Slug?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "blues":
                    return Slug.Blues;
                case "classic-rock":
                    return Slug.ClassicRock;
                case "jazz":
                    return Slug.Jazz;
                case "pop":
                    return Slug.Pop;
                case "rap":
                    return Slug.Rap;
                case "rnb":
                    return Slug.Rnb;
                case "rock":
                    return Slug.Rock;
                case "soul":
                    return Slug.Soul;
            }
            throw new Exception("Cannot unmarshal type Slug");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Slug)untypedValue;
            switch (value)
            {
                case Slug.Blues:
                    serializer.Serialize(writer, "blues");
                    return;
                case Slug.ClassicRock:
                    serializer.Serialize(writer, "classic-rock");
                    return;
                case Slug.Jazz:
                    serializer.Serialize(writer, "jazz");
                    return;
                case Slug.Pop:
                    serializer.Serialize(writer, "pop");
                    return;
                case Slug.Rap:
                    serializer.Serialize(writer, "rap");
                    return;
                case Slug.Rnb:
                    serializer.Serialize(writer, "rnb");
                    return;
                case Slug.Rock:
                    serializer.Serialize(writer, "rock");
                    return;
                case Slug.Soul:
                    serializer.Serialize(writer, "soul");
                    return;
            }
            throw new Exception("Cannot marshal type Slug");
        }

        public static readonly SlugConverter Singleton = new SlugConverter();
    }

    internal class ImageLicenseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ImageLicense) || t == typeof(ImageLicense?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "SeatGeek - 2022 (2000 X 2000)":
                    return ImageLicense.SeatGeek20222000X2000;
                case "SeatGeek - 2022 (Creative Project)":
                    return ImageLicense.SeatGeek2022CreativeProject;
                case "rightsmanaged":
                    return ImageLicense.Rightsmanaged;
            }
            throw new Exception("Cannot unmarshal type ImageLicense");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ImageLicense)untypedValue;
            switch (value)
            {
                case ImageLicense.SeatGeek20222000X2000:
                    serializer.Serialize(writer, "SeatGeek - 2022 (2000 X 2000)");
                    return;
                case ImageLicense.SeatGeek2022CreativeProject:
                    serializer.Serialize(writer, "SeatGeek - 2022 (Creative Project)");
                    return;
                case ImageLicense.Rightsmanaged:
                    serializer.Serialize(writer, "rightsmanaged");
                    return;
            }
            throw new Exception("Cannot marshal type ImageLicense");
        }

        public static readonly ImageLicenseConverter Singleton = new ImageLicenseConverter();
    }

    internal class NameEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NameEnum) || t == typeof(NameEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "concert":
                    return NameEnum.Concert;
                case "concerts":
                    return NameEnum.Concerts;
            }
            throw new Exception("Cannot unmarshal type NameEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NameEnum)untypedValue;
            switch (value)
            {
                case NameEnum.Concert:
                    serializer.Serialize(writer, "concert");
                    return;
                case NameEnum.Concerts:
                    serializer.Serialize(writer, "concerts");
                    return;
            }
            throw new Exception("Cannot marshal type NameEnum");
        }

        public static readonly NameEnumConverter Singleton = new NameEnumConverter();
    }

    internal class PerformerTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PerformerType) || t == typeof(PerformerType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "band")
            {
                return PerformerType.Band;
            }
            throw new Exception("Cannot unmarshal type PerformerType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PerformerType)untypedValue;
            if (value == PerformerType.Band)
            {
                serializer.Serialize(writer, "band");
                return;
            }
            throw new Exception("Cannot marshal type PerformerType");
        }

        public static readonly PerformerTypeConverter Singleton = new PerformerTypeConverter();
    }

    internal class StatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "normal")
            {
                return Status.Normal;
            }
            throw new Exception("Cannot unmarshal type Status");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Status)untypedValue;
            if (value == Status.Normal)
            {
                serializer.Serialize(writer, "normal");
                return;
            }
            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }

    internal class TimezoneConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Timezone) || t == typeof(Timezone?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "America/Indiana/Indianapolis":
                    return Timezone.AmericaIndianaIndianapolis;
                case "America/New_York":
                    return Timezone.AmericaNewYork;
            }
            throw new Exception("Cannot unmarshal type Timezone");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Timezone)untypedValue;
            switch (value)
            {
                case Timezone.AmericaIndianaIndianapolis:
                    serializer.Serialize(writer, "America/Indiana/Indianapolis");
                    return;
                case Timezone.AmericaNewYork:
                    serializer.Serialize(writer, "America/New_York");
                    return;
            }
            throw new Exception("Cannot marshal type Timezone");
        }

        public static readonly TimezoneConverter Singleton = new TimezoneConverter();
    }
}
