// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PerformersData;
//
//    var seatGeekPerformers = SeatGeekPerformers.FromJson(jsonString);

namespace PerformersData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SeatGeekPerformers
    {
        [JsonProperty("performers")]
        public List<Performer> Performers { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("took")]
        public long Took { get; set; }

        [JsonProperty("page")]
        public long Page { get; set; }

        [JsonProperty("per_page")]
        public long PerPage { get; set; }

        [JsonProperty("geolocation")]
        public object Geolocation { get; set; }
    }

    public partial class Performer
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("images")]
        public PerformerImages Images { get; set; }

        [JsonProperty("divisions")]
        public object Divisions { get; set; }

        [JsonProperty("links")]
        public List<object> Links { get; set; }

        [JsonProperty("has_upcoming_events")]
        public bool HasUpcomingEvents { get; set; }

        [JsonProperty("primary")]
        public bool Primary { get; set; }

        [JsonProperty("stats")]
        public Stats Stats { get; set; }

        [JsonProperty("taxonomies")]
        public List<Taxonomy> Taxonomies { get; set; }

        [JsonProperty("image_attribution")]
        public string ImageAttribution { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("home_venue_id")]
        public object HomeVenueId { get; set; }

        [JsonProperty("short_name")]
        public string ShortName { get; set; }

        [JsonProperty("num_upcoming_events")]
        public long NumUpcomingEvents { get; set; }

        [JsonProperty("colors")]
        public Colors Colors { get; set; }

        [JsonProperty("image_license")]
        public string ImageLicense { get; set; }

        [JsonProperty("genres", NullValueHandling = NullValueHandling.Ignore)]
        public List<Genre> Genres { get; set; }

        [JsonProperty("popularity")]
        public long Popularity { get; set; }

        [JsonProperty("location")]
        public object Location { get; set; }

        [JsonProperty("image_rights_message")]
        public string ImageRightsMessage { get; set; }

        [JsonProperty("themes")]
        public List<object> Themes { get; set; }

        [JsonProperty("domain_information")]
        public List<object> DomainInformation { get; set; }
    }

    public partial class Colors
    {
        [JsonProperty("all")]
        public List<string> All { get; set; }

        [JsonProperty("iconic")]
        public string Iconic { get; set; }

        [JsonProperty("primary")]
        public List<string> Primary { get; set; }
    }

    public partial class Genre
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("primary")]
        public bool Primary { get; set; }

        [JsonProperty("images")]
        public GenreImages Images { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }
    }

    public partial class GenreImages
    {
        [JsonProperty("1200x525")]
        public Uri The1200X525 { get; set; }

        [JsonProperty("1200x627")]
        public Uri The1200X627 { get; set; }

        [JsonProperty("136x136")]
        public Uri The136X136 { get; set; }

        [JsonProperty("500_700")]
        public Uri The500_700 { get; set; }

        [JsonProperty("800x320")]
        public Uri The800X320 { get; set; }

        [JsonProperty("banner")]
        public Uri Banner { get; set; }

        [JsonProperty("block")]
        public Uri Block { get; set; }

        [JsonProperty("criteo_130_160")]
        public Uri Criteo130_160 { get; set; }

        [JsonProperty("criteo_170_235")]
        public Uri Criteo170_235 { get; set; }

        [JsonProperty("criteo_205_100")]
        public Uri Criteo205_100 { get; set; }

        [JsonProperty("criteo_400_300")]
        public Uri Criteo400_300 { get; set; }

        [JsonProperty("fb_100x72")]
        public Uri Fb100X72 { get; set; }

        [JsonProperty("fb_600_315")]
        public Uri Fb600_315 { get; set; }

        [JsonProperty("huge")]
        public Uri Huge { get; set; }

        [JsonProperty("ipad_event_modal")]
        public Uri IpadEventModal { get; set; }

        [JsonProperty("ipad_header")]
        public Uri IpadHeader { get; set; }

        [JsonProperty("ipad_mini_explore")]
        public Uri IpadMiniExplore { get; set; }

        [JsonProperty("mongo")]
        public Uri Mongo { get; set; }

        [JsonProperty("square_mid")]
        public Uri SquareMid { get; set; }

        [JsonProperty("triggit_fb_ad")]
        public Uri TriggitFbAd { get; set; }
    }

    public partial class PerformerImages
    {
        [JsonProperty("huge", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Huge { get; set; }
    }

    public partial class Stats
    {
        [JsonProperty("event_count")]
        public long EventCount { get; set; }
    }

    public partial class Taxonomy
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parent_id")]
        public long? ParentId { get; set; }

        [JsonProperty("rank")]
        public long Rank { get; set; }

        [JsonProperty("seo_event_type")]
        public string SeoEventType { get; set; }
    }

    public enum TypeEnum { Band, NcaaFootball, Nfl };

    public partial class SeatGeekPerformers
    {
        public static SeatGeekPerformers FromJson(string json) => JsonConvert.DeserializeObject<SeatGeekPerformers>(json, PerformersData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SeatGeekPerformers self) => JsonConvert.SerializeObject(self, PerformersData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "band":
                    return TypeEnum.Band;
                case "ncaa_football":
                    return TypeEnum.NcaaFootball;
                case "nfl":
                    return TypeEnum.Nfl;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Band:
                    serializer.Serialize(writer, "band");
                    return;
                case TypeEnum.NcaaFootball:
                    serializer.Serialize(writer, "ncaa_football");
                    return;
                case TypeEnum.Nfl:
                    serializer.Serialize(writer, "nfl");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
