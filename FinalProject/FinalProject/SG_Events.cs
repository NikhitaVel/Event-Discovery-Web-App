// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EventData;
//
//    var seatGeek = SeatGeek.FromJson(jsonString);

namespace EventData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

public partial class SeatGeek
{
    [JsonProperty("events")]
    public List<Event> Events { get; set; }

    [JsonProperty("meta")]
    public Meta Meta { get; set; }
}

public partial class Event
{
    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("datetime_utc")]
    public DateTimeOffset DatetimeUtc { get; set; }

    [JsonProperty("venue")]
    public Venue Venue { get; set; }

    [JsonProperty("datetime_tbd")]
    public bool DatetimeTbd { get; set; }

    [JsonProperty("performers")]
    public List<Performer> Performers { get; set; }

    [JsonProperty("is_open")]
    public bool IsOpen { get; set; }

    [JsonProperty("links")]
    public List<object> Links { get; set; }

    [JsonProperty("datetime_local")]
    public DateTimeOffset DatetimeLocal { get; set; }

    [JsonProperty("time_tbd")]
    public bool TimeTbd { get; set; }

    [JsonProperty("short_title")]
    public string ShortTitle { get; set; }

    [JsonProperty("visible_until_utc")]
    public DateTimeOffset VisibleUntilUtc { get; set; }

    [JsonProperty("stats")]
    public EventStats Stats { get; set; }

    [JsonProperty("taxonomies")]
    public List<Taxonomy> Taxonomies { get; set; }

    [JsonProperty("url")]
    public Uri Url { get; set; }

    [JsonProperty("score")]
    public double Score { get; set; }

    [JsonProperty("announce_date")]
    public DateTimeOffset AnnounceDate { get; set; }

    [JsonProperty("created_at")]
    public DateTimeOffset CreatedAt { get; set; }

    [JsonProperty("date_tbd")]
    public bool DateTbd { get; set; }

    [JsonProperty("title")]
    public string Title { get; set; }

    [JsonProperty("popularity")]
    public double Popularity { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("status")]
    public Status Status { get; set; }

    [JsonProperty("access_method")]
    public AccessMethod AccessMethod { get; set; }

    [JsonProperty("event_promotion")]
    public object EventPromotion { get; set; }

    [JsonProperty("announcements")]
    public Announcements Announcements { get; set; }

    [JsonProperty("conditional")]
    public bool Conditional { get; set; }

    [JsonProperty("enddatetime_utc")]
    public object EnddatetimeUtc { get; set; }

    [JsonProperty("visible_at")]
    public DateTimeOffset? VisibleAt { get; set; }

    [JsonProperty("is_visible_override")]
    public IsVisibleOverride IsVisibleOverride { get; set; }

    [JsonProperty("tdc_pvo_id")]
    public long TdcPvoId { get; set; }

    [JsonProperty("tdc_pv_id")]
    public long TdcPvId { get; set; }

    [JsonProperty("is_visible")]
    public bool IsVisible { get; set; }

    [JsonProperty("themes")]
    public List<object> Themes { get; set; }

    [JsonProperty("domain_information")]
    public List<object> DomainInformation { get; set; }
}

public partial class AccessMethod
{
    [JsonProperty("method")]
    public string Method { get; set; }

    [JsonProperty("created_at")]
    public DateTimeOffset CreatedAt { get; set; }

    [JsonProperty("employee_only")]
    public bool EmployeeOnly { get; set; }
}

public partial class Announcements
{
}

public partial class Performer
{
    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("image")]
    public Uri Image { get; set; }

    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("images")]
    public PerformerImages Images { get; set; }

    [JsonProperty("divisions")]
    public List<Division> Divisions { get; set; }

    [JsonProperty("has_upcoming_events")]
    public bool HasUpcomingEvents { get; set; }

    [JsonProperty("primary", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Primary { get; set; }

    [JsonProperty("stats")]
    public PerformerStats Stats { get; set; }

    [JsonProperty("taxonomies")]
    public List<Taxonomy> Taxonomies { get; set; }

    [JsonProperty("image_attribution")]
    public string ImageAttribution { get; set; }

    [JsonProperty("url")]
    public Uri Url { get; set; }

    [JsonProperty("score")]
    public double Score { get; set; }

    [JsonProperty("slug")]
    public string Slug { get; set; }

    [JsonProperty("home_venue_id")]
    public object HomeVenueId { get; set; }

    [JsonProperty("short_name")]
    public string ShortName { get; set; }

    [JsonProperty("num_upcoming_events")]
    public long NumUpcomingEvents { get; set; }

    [JsonProperty("colors")]
    public Colors Colors { get; set; }

    [JsonProperty("image_license")]
    public string ImageLicense { get; set; }

    [JsonProperty("genres", NullValueHandling = NullValueHandling.Ignore)]
    public List<Genre> Genres { get; set; }

    [JsonProperty("popularity")]
    public long Popularity { get; set; }

    [JsonProperty("location")]
    public object Location { get; set; }

    [JsonProperty("image_rights_message")]
    public string ImageRightsMessage { get; set; }

    [JsonProperty("home_team", NullValueHandling = NullValueHandling.Ignore)]
    public bool? HomeTeam { get; set; }

    [JsonProperty("away_team", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AwayTeam { get; set; }
}

public partial class Colors
{
    [JsonProperty("all")]
    public List<string> All { get; set; }

    [JsonProperty("iconic")]
    public string Iconic { get; set; }

    [JsonProperty("primary")]
    public List<string> Primary { get; set; }
}

public partial class Division
{
    [JsonProperty("taxonomy_id")]
    public long TaxonomyId { get; set; }

    [JsonProperty("short_name")]
    public string ShortName { get; set; }

    [JsonProperty("display_name")]
    public string DisplayName { get; set; }

    [JsonProperty("display_type")]
    public string DisplayType { get; set; }

    [JsonProperty("division_level")]
    public long DivisionLevel { get; set; }

    [JsonProperty("slug")]
    public string Slug { get; set; }
}

public partial class Genre
{
    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("slug")]
    public string Slug { get; set; }

    [JsonProperty("primary")]
    public bool Primary { get; set; }

    [JsonProperty("images")]
    public GenreImages Images { get; set; }

    [JsonProperty("image")]
    public Uri Image { get; set; }

    [JsonProperty("document_source")]
    public DocumentSource DocumentSource { get; set; }
}

public partial class DocumentSource
{
    [JsonProperty("source_type")]
    public SourceType SourceType { get; set; }

    [JsonProperty("generation_type")]
    public GenerationType GenerationType { get; set; }
}

public partial class GenreImages
{
    [JsonProperty("1200x525")]
    public Uri The1200X525 { get; set; }

    [JsonProperty("1200x627")]
    public Uri The1200X627 { get; set; }

    [JsonProperty("136x136")]
    public Uri The136X136 { get; set; }

    [JsonProperty("500_700")]
    public Uri The500_700 { get; set; }

    [JsonProperty("800x320")]
    public Uri The800X320 { get; set; }

    [JsonProperty("banner")]
    public Uri Banner { get; set; }

    [JsonProperty("block")]
    public Uri Block { get; set; }

    [JsonProperty("criteo_130_160")]
    public Uri Criteo130_160 { get; set; }

    [JsonProperty("criteo_170_235")]
    public Uri Criteo170_235 { get; set; }

    [JsonProperty("criteo_205_100")]
    public Uri Criteo205_100 { get; set; }

    [JsonProperty("criteo_400_300")]
    public Uri Criteo400_300 { get; set; }

    [JsonProperty("fb_100x72")]
    public Uri Fb100X72 { get; set; }

    [JsonProperty("fb_600_315")]
    public Uri Fb600_315 { get; set; }

    [JsonProperty("huge")]
    public Uri Huge { get; set; }

    [JsonProperty("ipad_event_modal")]
    public Uri IpadEventModal { get; set; }

    [JsonProperty("ipad_header")]
    public Uri IpadHeader { get; set; }

    [JsonProperty("ipad_mini_explore")]
    public Uri IpadMiniExplore { get; set; }

    [JsonProperty("mongo")]
    public Uri Mongo { get; set; }

    [JsonProperty("square_mid")]
    public Uri SquareMid { get; set; }

    [JsonProperty("triggit_fb_ad")]
    public Uri TriggitFbAd { get; set; }
}

public partial class PerformerImages
{
    [JsonProperty("huge", NullValueHandling = NullValueHandling.Ignore)]
    public Uri Huge { get; set; }
}

public partial class PerformerStats
{
    [JsonProperty("event_count")]
    public long EventCount { get; set; }
}

public partial class Taxonomy
{
    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("parent_id")]
    public long? ParentId { get; set; }

    [JsonProperty("document_source", NullValueHandling = NullValueHandling.Ignore)]
    public DocumentSource DocumentSource { get; set; }

    [JsonProperty("rank")]
    public long Rank { get; set; }

    [JsonProperty("seo_event_type")]
    public string SeoEventType { get; set; }
}

public partial class EventStats
{
    [JsonProperty("listing_count")]
    public long? ListingCount { get; set; }

    [JsonProperty("average_price")]
    public long? AveragePrice { get; set; }

    [JsonProperty("lowest_price_good_deals")]
    public long? LowestPriceGoodDeals { get; set; }

    [JsonProperty("lowest_price")]
    public long? LowestPrice { get; set; }

    [JsonProperty("highest_price")]
    public long? HighestPrice { get; set; }

    [JsonProperty("visible_listing_count")]
    public long? VisibleListingCount { get; set; }

    [JsonProperty("dq_bucket_counts")]
    public List<long> DqBucketCounts { get; set; }

    [JsonProperty("median_price")]
    public long? MedianPrice { get; set; }

    [JsonProperty("lowest_sg_base_price")]
    public long? LowestSgBasePrice { get; set; }

    [JsonProperty("lowest_sg_base_price_good_deals")]
    public long? LowestSgBasePriceGoodDeals { get; set; }
}

public partial class Venue
{
    [JsonProperty("state")]
    public State State { get; set; }

    [JsonProperty("name_v2")]
    public string NameV2 { get; set; }

    [JsonProperty("postal_code")]
    [JsonConverter(typeof(ParseStringConverter))]
    public long PostalCode { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("links")]
    public List<object> Links { get; set; }

    [JsonProperty("timezone")]
    public Timezone Timezone { get; set; }

    [JsonProperty("url")]
    public Uri Url { get; set; }

    [JsonProperty("score")]
    public double Score { get; set; }

    [JsonProperty("location")]
    public Location Location { get; set; }

    [JsonProperty("address")]
    public string Address { get; set; }

    [JsonProperty("country")]
    public Country Country { get; set; }

    [JsonProperty("has_upcoming_events")]
    public bool HasUpcomingEvents { get; set; }

    [JsonProperty("num_upcoming_events")]
    public long NumUpcomingEvents { get; set; }

    [JsonProperty("city")]
    public City City { get; set; }

    [JsonProperty("slug")]
    public string Slug { get; set; }

    [JsonProperty("extended_address")]
    public string ExtendedAddress { get; set; }

    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("popularity")]
    public long Popularity { get; set; }

    [JsonProperty("access_method")]
    public AccessMethod AccessMethod { get; set; }

    [JsonProperty("metro_code")]
    public long MetroCode { get; set; }

    [JsonProperty("capacity")]
    public long Capacity { get; set; }

    [JsonProperty("display_location")]
    public DisplayLocation DisplayLocation { get; set; }
}

public partial class Location
{
    [JsonProperty("lat")]
    public double Lat { get; set; }

    [JsonProperty("lon")]
    public double Lon { get; set; }
}

public partial class Meta
{
    [JsonProperty("total")]
    public long Total { get; set; }

    [JsonProperty("took")]
    public long Took { get; set; }

    [JsonProperty("page")]
    public long Page { get; set; }

    [JsonProperty("per_page")]
    public long PerPage { get; set; }

    [JsonProperty("geolocation")]
    public object Geolocation { get; set; }
}

public enum IsVisibleOverride { Unset, Visible };

public enum GenerationType { Full };

public enum SourceType { Elastic };

public enum Status { Normal };

public enum City { Cincinnati };

public enum Country { Us };

public enum DisplayLocation { CincinnatiOh };

public enum State { Oh };

public enum Timezone { AmericaNewYork };

public partial class SeatGeek
{
    public static SeatGeek FromJson(string json) => JsonConvert.DeserializeObject<SeatGeek>(json, EventData.Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this SeatGeek self) => JsonConvert.SerializeObject(self, EventData.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
            {
                IsVisibleOverrideConverter.Singleton,
                GenerationTypeConverter.Singleton,
                SourceTypeConverter.Singleton,
                StatusConverter.Singleton,
                CityConverter.Singleton,
                CountryConverter.Singleton,
                DisplayLocationConverter.Singleton,
                StateConverter.Singleton,
                TimezoneConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
}

internal class IsVisibleOverrideConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(IsVisibleOverride) || t == typeof(IsVisibleOverride?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "UNSET":
                return IsVisibleOverride.Unset;
            case "VISIBLE":
                return IsVisibleOverride.Visible;
        }
        throw new Exception("Cannot unmarshal type IsVisibleOverride");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (IsVisibleOverride)untypedValue;
        switch (value)
        {
            case IsVisibleOverride.Unset:
                serializer.Serialize(writer, "UNSET");
                return;
            case IsVisibleOverride.Visible:
                serializer.Serialize(writer, "VISIBLE");
                return;
        }
        throw new Exception("Cannot marshal type IsVisibleOverride");
    }

    public static readonly IsVisibleOverrideConverter Singleton = new IsVisibleOverrideConverter();
}

internal class GenerationTypeConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(GenerationType) || t == typeof(GenerationType?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "FULL")
        {
            return GenerationType.Full;
        }
        throw new Exception("Cannot unmarshal type GenerationType");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (GenerationType)untypedValue;
        if (value == GenerationType.Full)
        {
            serializer.Serialize(writer, "FULL");
            return;
        }
        throw new Exception("Cannot marshal type GenerationType");
    }

    public static readonly GenerationTypeConverter Singleton = new GenerationTypeConverter();
}

internal class SourceTypeConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(SourceType) || t == typeof(SourceType?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "ELASTIC")
        {
            return SourceType.Elastic;
        }
        throw new Exception("Cannot unmarshal type SourceType");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (SourceType)untypedValue;
        if (value == SourceType.Elastic)
        {
            serializer.Serialize(writer, "ELASTIC");
            return;
        }
        throw new Exception("Cannot marshal type SourceType");
    }

    public static readonly SourceTypeConverter Singleton = new SourceTypeConverter();
}

internal class StatusConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "normal")
        {
            return Status.Normal;
        }
        throw new Exception("Cannot unmarshal type Status");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Status)untypedValue;
        if (value == Status.Normal)
        {
            serializer.Serialize(writer, "normal");
            return;
        }
        throw new Exception("Cannot marshal type Status");
    }

    public static readonly StatusConverter Singleton = new StatusConverter();
}

internal class CityConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(City) || t == typeof(City?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "Cincinnati")
        {
            return City.Cincinnati;
        }
        throw new Exception("Cannot unmarshal type City");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (City)untypedValue;
        if (value == City.Cincinnati)
        {
            serializer.Serialize(writer, "Cincinnati");
            return;
        }
        throw new Exception("Cannot marshal type City");
    }

    public static readonly CityConverter Singleton = new CityConverter();
}

internal class CountryConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "US")
        {
            return Country.Us;
        }
        throw new Exception("Cannot unmarshal type Country");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Country)untypedValue;
        if (value == Country.Us)
        {
            serializer.Serialize(writer, "US");
            return;
        }
        throw new Exception("Cannot marshal type Country");
    }

    public static readonly CountryConverter Singleton = new CountryConverter();
}

internal class DisplayLocationConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(DisplayLocation) || t == typeof(DisplayLocation?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "Cincinnati, OH")
        {
            return DisplayLocation.CincinnatiOh;
        }
        throw new Exception("Cannot unmarshal type DisplayLocation");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (DisplayLocation)untypedValue;
        if (value == DisplayLocation.CincinnatiOh)
        {
            serializer.Serialize(writer, "Cincinnati, OH");
            return;
        }
        throw new Exception("Cannot marshal type DisplayLocation");
    }

    public static readonly DisplayLocationConverter Singleton = new DisplayLocationConverter();
}

internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}

internal class StateConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(State) || t == typeof(State?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "OH")
        {
            return State.Oh;
        }
        throw new Exception("Cannot unmarshal type State");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (State)untypedValue;
        if (value == State.Oh)
        {
            serializer.Serialize(writer, "OH");
            return;
        }
        throw new Exception("Cannot marshal type State");
    }

    public static readonly StateConverter Singleton = new StateConverter();
}

internal class TimezoneConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Timezone) || t == typeof(Timezone?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "America/New_York")
        {
            return Timezone.AmericaNewYork;
        }
        throw new Exception("Cannot unmarshal type Timezone");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Timezone)untypedValue;
        if (value == Timezone.AmericaNewYork)
        {
            serializer.Serialize(writer, "America/New_York");
            return;
        }
        throw new Exception("Cannot marshal type Timezone");
    }

    public static readonly TimezoneConverter Singleton = new TimezoneConverter();
}
}
